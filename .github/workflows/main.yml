# This is a basic workflow to help you get started with Actions
# workflow의 이름
name: Deploy to Amazon EC2 / Spring Boot with Maven

# 환경변수 $변수명으로 사용
env:
  # 프로젝트 이름
  PROJECT_NAME: spring_boot_product_project
  # S3버킷
  BUCKET_NAME: gitgubaction-aws-bucket 
  # 어플리케이션
  CODE_DEPLOY_APP_NAME: aws-codedeploy-cicd 
  # 배포그룹
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: aws-codedeploy-group

# Controls when the workflow will run
# 해당 workflow가 언제 실행될 것인지에 대한 트리거를 지정
# 릴리즈 발생 시 작동
on:
  release:
    types: [created]
    
# main 브랜치에 push 이벤트 발생시 작동
#on:
#  push:
#    branches:
#      - main

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
# workflow는 한개 이상의 job을 가지며, 각 job은 여러 step에 따라 단계를 나눌 수 있습니다.
jobs:
  # This workflow contains a single job called "build"
  build:
    name: CI/CD
      # 해당 jobs에서 아래의 steps들이 어떠한 환경에서 실행될 것인지를 지정합니다.
    runs-on: ubuntu-latest
  
    steps:
      # 작업에서 액세스할 수 있도록 $GITHUB_WORKSPACE에서 저장소를 체크아웃합니다.
      - uses: actions/checkout@v2
      
      # Spring 구동을 위한 JDK 17을 세팅합니다.
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'zulu'
     
      # Caching dependencies (디펜던시를 캐싱하여 반복적인 빌드 작업의 시간을 단축할 수 있다.)
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
    
      # Build
      - name: Build with Maven
        run: mvn -B package --file pom.xml
  
      # build한 후 프로젝트를 압축한다.
      - name: Make zip file
        run: zip -r ./$PROJECT_NAME.zip .
        shell: bash
      
      # aws 인증서비스
      # github repository에서 Setting에서 사용할 암호화된 변수
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key: ${{ secrets.AWS_ACCESS_KEY }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION}}
  
      # Upload to S3 stroage
      - name: Upload to S3
        run: aws s3 cp $PROJECT_NAME.zip s3://$BUCKET_NAME/deploy/$PROJECT_NAME.zip --region ap-northeast-2

      # CodeDeploy에게 배포 명령을 내린다.
      - name: Code Deploy
        run: >
         aws deploy create-deployment --application-name $CODE_DEPLOY_APP
         --deployment-config-name CodeDeployDefault.AllAtOnce
         --deployment-group-name $CODE_DEPLOY_DEPLOYMENT_GROUP
         --s3-location bucket=$BUCKET_NAME,bundleType=zip,key=deploy/$PROJECT_NAME.zip
        # CodeDeploy 애플리케이션 이름 
        # 배포 방식인데 기본값을 사용
        # CodeDeploy 배포 그룹 이름
        # 버킷 이름, 키 값, 번들타입
         
